fn main() {
    println!("Hello, 数值类型!");

    // 整型
    // 类型定义的形式统一为：有无符号 + 类型大小(位数)。
    // 整数是没有小数部分的数字。之前使用过的 i32 类型，表示有符号的 32 位整数
    //（ i 是英文单词 integer 的首字母，与之相反的是 u，代表无符号 unsigned 类型）
    let _a: u32 = 1;

    // 浮点型
    // 浮点类型数字 是带有小数点的数字，在 Rust 中浮点类型数字也有两种基本类型： f32 和 f64，分别为 32 位和 64 位大小。
    // 默认浮点类型是 f64，在现代的 CPU 中它的速度与 f32 几乎相同，但精度更高。
    let _x = 2.0; // f64

    let _y: f32 = 3.0; // f32
    // 断言0.1 + 0.2与0.3相等
    // assert!(0.1 + 0.2 == 0.3);

    // 数字运算
    // 加法
    let sum = 5 + 10;
    println!("5 + 10 的值为：{}", sum);

    // 减法
    let difference = 95.5 - 4.3;
    println!("95.5 - 4.3 的值为：{}", difference);


    // 乘法
    let product = 4 * 30;
    println!("4 * 30 的值为：{}", product);

    // 除法
    let quotient = 56.7 / 32.2;
    println!("56.7 / 32.2 的值为：{}", quotient);


    // 求余
    let remainder = 43 % 5;
    println!("43 % 5 的值为：{}", remainder);
    
    // 序列(Range)
    // Rust 提供了一个非常简洁的方式，用来生成连续的数值，例如 1..5，生成从 1 到 4 的连续数字，不包含 5 
    // 1..=5，生成从 1 到 5 的连续数字

    for i in 1..5 {
        println!("{}",i);
    }
}
